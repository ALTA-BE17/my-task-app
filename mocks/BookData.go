// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	book "github.com/ALTA-BE17/Rest-API-Clean-Arch-Test/features/book"
	mock "github.com/stretchr/testify/mock"
)

// BookData is an autogenerated mock type for the BookData type
type BookData struct {
	mock.Mock
}

// InsertBook provides a mock function with given fields: userId, request
func (_m *BookData) InsertBook(userId uint, request book.Core) (book.Core, error) {
	ret := _m.Called(userId, request)

	var r0 book.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, book.Core) (book.Core, error)); ok {
		return rf(userId, request)
	}
	if rf, ok := ret.Get(0).(func(uint, book.Core) book.Core); ok {
		r0 = rf(userId, request)
	} else {
		r0 = ret.Get(0).(book.Core)
	}

	if rf, ok := ret.Get(1).(func(uint, book.Core) error); ok {
		r1 = rf(userId, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBooks provides a mock function with given fields:
func (_m *BookData) ListBooks() ([]book.Core, error) {
	ret := _m.Called()

	var r0 []book.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]book.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []book.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: userId, request
func (_m *BookData) UpdateBook(userId uint, request *book.Core) (book.Core, error) {
	ret := _m.Called(userId, request)

	var r0 book.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *book.Core) (book.Core, error)); ok {
		return rf(userId, request)
	}
	if rf, ok := ret.Get(0).(func(uint, *book.Core) book.Core); ok {
		r0 = rf(userId, request)
	} else {
		r0 = ret.Get(0).(book.Core)
	}

	if rf, ok := ret.Get(1).(func(uint, *book.Core) error); ok {
		r1 = rf(userId, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookData interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookData creates a new instance of BookData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookData(t mockConstructorTestingTNewBookData) *BookData {
	mock := &BookData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
